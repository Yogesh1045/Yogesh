1)Problem 1: Real-Time Weather Monitoring System
Scenario:
You are developing a real-time weather monitoring system for a weather forecasting company. The system needs to fetch and display weather data for a specified location.
Tasks:
1. Model the data flow for fetching weather information from an external API and displaying it to the user.
2. Implement a Python application that integrates with a weather API (e.g., OpenWeatherMap) to fetch real-time weather data.
3. Display the current weather information, including temperature, weather conditions, humidity, and wind speed.
4. Allow users to input the location (city name or coordinates) and display the corresponding weather data.
Deliverables:
• Data flow diagram illustrating the interaction between the application and the API.
Pseudocode and implementation of the weather monitoring system.
Documentation of the API integration and the methods used to fetch and display weather data.
Explanation of any assumptions made and potential improvements.

dATA FLOW DIAGRAM:-

User Input (Location) -> Python Application -> Weather API (e.g., OpenWeatherMap)
                ^                                          |
                |                                          v
         Display Weather Data <- JSON Response <- API Request


# Import necessary libraries
import requests
import json

# Function to fetch weather data from API
def fetch_weather_data(location):
    api_key = 'your_api_key_here'  # Replace with your actual API key
    base_url = 'https://api.openweathermap.org/data/2.5/weather'

    # Handling different location input types (city name or coordinates)
    if location.isdigit():  # Assuming input is coordinates (latitude, longitude)
        params = {'lat': location.split(',')[0], 'lon': location.split(',')[1], 'appid': api_key, 'units': 'metric'}
    else:  # Assuming input is city name
        params = {'q': location, 'appid': api_key, 'units': 'metric'}

    try:
        response = requests.get(base_url, params=params)
        data = response.json()

        if response.status_code == 200:
            return data  # Return JSON data received from API
        else:
            print(f"Error fetching data: {data['message']}")
            return None

    except requests.exceptions.RequestException as e:
        print(f"Error fetching data: {e}")
        return None

# Function to display weather data
def display_weather_data(data):
    if data:
        # Extracting relevant weather information
        temperature = data['main']['temp']
        weather_desc = data['weather'][0]['description']
        humidity = data['main']['humidity']
        wind_speed = data['wind']['speed']

        # Displaying weather information
        print(f"Temperature: {temperature} °C")
        print(f"Weather: {weather_desc}")
        print(f"Humidity: {humidity}%")
        print(f"Wind Speed: {wind_speed} m/s")
    else:
        print("No weather data available.")

# Main function to run the application
def main():
    location = input("Enter city name or coordinates (latitude,longitude): ")
    weather_data = fetch_weather_data(location)
    display_weather_data(weather_data)

if __name__ == "__main__":
    main()

Documentation
API Integration
This Python application integrates with the OpenWeatherMap API to fetch real-time weather data. It uses the requests library to send HTTP requests to the API endpoint (https://api.openweathermap.org/data/2.5/weather) with parameters such as API key (appid), location (q for city name or lat, lon for coordinates), and units (metric for Celsius).

Methods Used
Fetching Weather Data (fetch_weather_data function):

Constructs the API request based on user input (city name or coordinates).
Sends an HTTP GET request to the API and handles the JSON response.
Checks for errors and prints appropriate error messages.
Displaying Weather Data (display_weather_data function):

Extracts relevant weather information such as temperature, weather description, humidity, and wind speed from the JSON response.
Prints the weather information in a readable format.
Assumptions
Input Handling: The application assumes the user inputs either a city name or coordinates in the format latitude,longitude.
API Key: You need to replace 'your_api_key_here' with your actual OpenWeatherMap API key for the application to function properly.
Potential Improvements
Error Handling: Enhance error handling to cover more edge cases (e.g., network errors, invalid input formats).
User Interface: Develop a graphical user interface (GUI) or web interface for better user interaction.
Caching: Implement caching mechanisms to reduce the number of API calls for repetitive requests within a short period.
Additional Weather Parameters: Expand the application to fetch and display more detailed weather parameters provided by the API.
This system provides a basic framework for fetching and displaying weather data from an external API, which can be expanded and improved based on specific requirements and additional features desired for the weather monitoring system.




2) PROBLEM 2-INVENTORY MANAGEMENT SYSTEM OPTIMIZATION
SCENARIO-
You have been hired by a retail company to optimize their inventory management system. The company wants to minimize stockouts and overstock situations while maximizing inventory turnover and profitability.
Tasks:
1. Model the inventory system: Define the structure of the inventory system, including products, warehouses, and current stock levels.
2. Implement an inventory tracking application: Develop a Python application that tracks inventory levels in real-time and alerts when stock levels fall below a certain threshold.
3. Optimize inventory ordering: Implement algorithms to calculate optimal reorder points and quantities based on historical sales data, lead times, and demand forecasts.
4. Generate reports: Provide reports on inventory turnover rates, stockout occurrences, and cost implications of overstock situations.
5. User interaction: Allow users to input product IDs or names to view current stock levels, reorder recommendations, and historical data.
Deliverables:
Data Flow Diagram: Illustrate how data flows within the inventory management system, from input (e.g., sales data, inventory adjustments) to output (e.g., reorder alerts, reports).
Pseudocode and Implementation: Provide pseudocode and actual code demonstrating
how inventory levels are tracked, reorder points are calculated, and reports are
generated.
Documentation: Explain the algorithms used for reorder optimization, how historical data influences decisions, and any assumptions made (e.g., constant lead times).
• User Interface: Develop a user-friendly interface for accessing inventory information, viewing reports, and receiving alerts.
Assumptions and Improvements: Discuss assumptions about demand patterns, supplier reliability, and potential improvements for the inventory management system's

DATA FLOW DIAGRAM:-

User Input (Product ID/Name, Sales Data, Inventory Adjustments) -> Inventory Tracking Application -> Reorder Calculation Algorithm
                 ^                                                                              |
                 |                                                                              v
           Alert on Low Stock
                                                        Generate Reports (Inventory Turnover, Stockouts, Cost Implications)

INVENTORY TRACKING APPLICATION:-

class Product:
    def __init__(self, product_id, name, initial_stock, reorder_point, reorder_quantity):
        self.product_id = product_id
        self.name = name
        self.stock = initial_stock
        self.reorder_point = reorder_point
        self.reorder_quantity = reorder_quantity
    
    def update_stock(self, adjustment):
        self.stock += adjustment

class InventoryManagementSystem:
    def __init__(self):
        self.products = {}
    
    def add_product(self, product_id, name, initial_stock, reorder_point, reorder_quantity):
        if product_id not in self.products:
            self.products[product_id] = Product(product_id, name, initial_stock, reorder_point, reorder_quantity)
        else:
            print(f"Product with ID {product_id} already exists.")
    
    def track_inventory(self, product_id, adjustment):
        if product_id in self.products:
            self.products[product_id].update_stock(adjustment)
            if self.products[product_id].stock < self.products[product_id].reorder_point:
                self.generate_reorder_alert(product_id)
        else:
            print(f"Product with ID {product_id} does not exist.")
    
    def generate_reorder_alert(self, product_id):
        print(f"Alert: Product {self.products[product_id].name} is below reorder point. Current stock: {self.products[product_id].stock}")
    
    def get_product_stock(self, product_id):
        if product_id in self.products:
            return self.products[product_id].stock
        else:
            return None

# Example usage:
ims = InventoryManagementSystem()
ims.add_product(1, "Keyboard", 50, 10, 50)
ims.add_product(2, "Mouse", 75, 15, 30)

# Simulate inventory adjustments
ims.track_inventory(1, -5)  # Sold 5 keyboards
ims.track_inventory(2, -10)  # Sold 10 mice

# Check current stock levels
print("Current stock levels:")
print(f"Keyboard: {ims.get_product_stock(1)}")
print(f"Mouse: {ims.get_product_stock(2)}")

### Data Flow Diagram

```
User Input (Product ID/Name, Sales Data, Inventory Adjustments) -> Inventory Tracking Application -> Reorder Calculation Algorithm
                 ^                                                                              |
                 |                                                                              v
           Alert on Low Stock                                                        Generate Reports (Inventory Turnover, Stockouts, Cost Implications)
```

### Pseudocode and Implementation

#### Inventory Tracking Application

```python
class Product:
    def __init__(self, product_id, name, initial_stock, reorder_point, reorder_quantity):
        self.product_id = product_id
        self.name = name
        self.stock = initial_stock
        self.reorder_point = reorder_point
        self.reorder_quantity = reorder_quantity
    
    def update_stock(self, adjustment):
        self.stock += adjustment

class InventoryManagementSystem:
    def __init__(self):
        self.products = {}
    
    def add_product(self, product_id, name, initial_stock, reorder_point, reorder_quantity):
        if product_id not in self.products:
            self.products[product_id] = Product(product_id, name, initial_stock, reorder_point, reorder_quantity)
        else:
            print(f"Product with ID {product_id} already exists.")
    
    def track_inventory(self, product_id, adjustment):
        if product_id in self.products:
            self.products[product_id].update_stock(adjustment)
            if self.products[product_id].stock < self.products[product_id].reorder_point:
                self.generate_reorder_alert(product_id)
        else:
            print(f"Product with ID {product_id} does not exist.")
    
    def generate_reorder_alert(self, product_id):
        print(f"Alert: Product {self.products[product_id].name} is below reorder point. Current stock: {self.products[product_id].stock}")
    
    def get_product_stock(self, product_id):
        if product_id in self.products:
            return self.products[product_id].stock
        else:
            return None

# Example usage:
ims = InventoryManagementSystem()
ims.add_product(1, "Keyboard", 50, 10, 50)
ims.add_product(2, "Mouse", 75, 15, 30)

# Simulate inventory adjustments
ims.track_inventory(1, -5)  # Sold 5 keyboards
ims.track_inventory(2, -10)  # Sold 10 mice

# Check current stock levels
print("Current stock levels:")
print(f"Keyboard: {ims.get_product_stock(1)}")
print(f"Mouse: {ims.get_product_stock(2)}")
```

#### Reorder Calculation Algorithm (Example)

```python
class ReorderOptimizer:
    def __init__(self, demand_history, lead_time):
        self.demand_history = demand_history  # List of historical demand data
        self.lead_time = lead_time  # Lead time in days for ordering
    
    def calculate_reorder_point(self):
        # Assuming normal distribution and constant lead time
        mean_demand = sum(self.demand_history) / len(self.demand_history)
        std_deviation = statistics.stdev(self.demand_history)
        safety_factor = 1.65  # Z-score for 95% service level
        
        reorder_point = mean_demand * self.lead_time + safety_factor * std_deviation * math.sqrt(self.lead_time)
        
        return reorder_point
    
    def calculate_reorder_quantity(self):
        # Economic Order Quantity (EOQ) calculation
        # For simplicity, assuming constant demand and no quantity discounts
        annual_demand = sum(self.demand_history)
        optimal_quantity = math.sqrt((2 * annual_demand * self.lead_time) / 1)  # EOQ formula
        
        return optimal_quantity

# Example usage:
demand_history = [20, 25, 30, 35, 28, 32, 27, 22, 26, 24]  # Example demand history
lead_time = 7  # Example lead time
optimizer = ReorderOptimizer(demand_history, lead_time)
reorder_point = optimizer.calculate_reorder_point()
reorder_quantity = optimizer.calculate_reorder_quantity()

print(f"Reorder Point: {reorder_point}")
print(f"Reorder Quantity: {reorder_quantity}")
```

### Documentation

#### Algorithms for Reorder Optimization

1. **Reorder Point Calculation**:
   - Uses historical demand data to calculate the average demand over a period and the standard deviation to estimate variability.
   - Incorporates a safety factor (e.g., Z-score for a desired service level) to determine the reorder point that minimizes stockout risk.

2. **Reorder Quantity Calculation**:
   - Implements the Economic Order Quantity (EOQ) model to determine the optimal order quantity.
   - Assumes constant demand and lead time, aiming to minimize total ordering and holding costs.

#### Assumptions

- **Demand Patterns**: Assumes demand follows a normal distribution or can be approximated as such for reorder point calculations.
- **Lead Times**: Assumes lead times are constant and known, impacting the reorder point but not the EOQ calculations.

#### User Interface

A user-friendly interface can be developed using a GUI framework (e.g., Tkinter for desktop applications or Flask/Django for web applications). This interface would allow users to:

- Input product IDs or names to view current stock levels and receive alerts on low stock.
- Generate reports on inventory turnover rates, stockout occurrences, and cost implications of overstock situations.
- Display recommended reorder quantities and points based on historical data and algorithms implemented.

### Improvements

- **Dynamic Lead Time**: Incorporate variability in lead times to enhance accuracy in reorder point calculations.
- **Demand Forecasting**: Implement more sophisticated forecasting models (e.g., ARIMA, exponential smoothing) for demand predictions.
- **Integration with ERP Systems**: Integrate the inventory management system with enterprise resource planning (ERP) systems for seamless data flow and automation.
- **Supplier Collaboration**: Establish partnerships with suppliers to streamline ordering processes and reduce lead times.

By addressing these improvements, the inventory management system can achieve higher efficiency in inventory turnover, reduce stockouts, and optimize ordering decisions to minimize costs associated with overstock situations.




3)Problem 3: Real-Time Traffic Monitoring System
Scenario:
You are working on a project to develop a real-time traffic monitoring system for a smart city initiative. The system should provide real-time traffic updates and suggest alternative routes.
Tasks:
1. Model the data flow for fetching real-time traffic information from an external API and displaying it to the user.
2. Implement a Python application that integrates with a traffic monitoring API (e.g., Google Maps Traffic API) to fetch real-time traffic data.
3. Display current traffic conditions, estimated travel time, and any incidents or delays.
4. Allow users to input a starting point and destination to receive traffic updates and alternative routes.
Deliverables:
Data flow diagram illustrating the interaction between the application and the API.
Pseudocode and implementation of the traffic monitoring system.
Documentation of the API integration and the methods used to fetch and display traffic data.
Explanation of any assumptions made and potential improvements.

DATA FLOW DIAGRAM:-

User Input (Starting Point, Destination) -> Python Application -> Traffic API (e.g., Google Maps Traffic API)
                ^                                              |
                |                                              v
          Display Traffic Information <- JSON Response <- API Request

TRAFFIC MONITERING SYSTEM:-

import requests

class TrafficMonitoringSystem:
    def __init__(self, api_key):
        self.api_key = api_key
        self.base_url = 'https://maps.googleapis.com/maps/api/directions/json'
    
    def fetch_traffic_data(self, origin, destination):
        params = {
            'origin': origin,
            'destination': destination,
            'key': self.api_key,
            'departure_time': 'now',
            'traffic_model': 'best_guess',
            'mode': 'driving'
        }

        try:
            response = requests.get(self.base_url, params=params)
            data = response.json()

            if response.status_code == 200:
                return data  # Return JSON data received from API
            else:
                print(f"Error fetching data: {data['error_message']}")
                return None

        except requests.exceptions.RequestException as e:
            print(f"Error fetching data: {e}")
            return None

    def display_traffic_info(self, data):
        if data:
            # Extract relevant traffic information
            routes = data.get('routes', [])
            if routes:
                main_route = routes[0]
                traffic_condition = main_route['summary']
                estimated_time = main_route['legs'][0]['duration_in_traffic']['text']
                incidents = main_route.get('warnings', [])

                # Displaying traffic information
                print(f"Traffic Conditions: {traffic_condition}")
                print(f"Estimated Travel Time: {estimated_time}")
                if incidents:
                    print("Incidents/Warnings:")
                    for incident in incidents:
                        print(f"- {incident}")
                else:
                    print("No incidents or warnings.")
            else:
                print("No routes found.")

        else:
            print("No traffic data available.")

# Example usage:
if __name__ == "__main__":
    api_key = 'your_api_key_here'  # Replace with your actual API key
    tms = TrafficMonitoringSystem(api_key)
    origin = input("Enter starting point: ")
    destination = input("Enter destination: ")
    traffic_data = tms.fetch_traffic_data(origin, destination)
    tms.display_traffic_info(traffic_data)

Documentation
API Integration and Methods
API Integration:

The system integrates with the Google Maps Directions API to fetch real-time traffic data.
Constructs a request with parameters including origin, destination, API key, departure time (set to 'now' for real-time data), traffic model, and mode of travel.
Fetch Traffic Data (fetch_traffic_data method):

Sends an HTTP GET request to the API endpoint with constructed parameters.
Handles JSON response to extract traffic conditions, estimated travel time, and any incidents or warnings along the route.
Display Traffic Information (display_traffic_info method):

Parses JSON response to extract and display relevant traffic information such as traffic conditions, estimated travel time, and incidents/warnings.
Handles cases where no routes are found or no traffic data is available.
Assumptions
Real-Time Updates: Assumes real-time traffic data availability and updates from the Google Maps Traffic API.
Mode of Travel: Primarily focused on driving mode; can be extended for other modes like walking or transit.
API Key: Requires a valid Google Maps API key for access to the Directions API.
Potential Improvements
Alternative Routes: Enhance the application to suggest alternative routes based on current traffic conditions.
User Preferences: Allow users to specify preferences such as avoiding tolls or highways.
Historical Traffic Data: Integrate historical traffic data to provide more accurate predictions and route suggestions.
Visual Interface: Develop a graphical interface (GUI) for easier interaction and visualization of traffic information.
By incorporating these improvements, the traffic monitoring system can provide more comprehensive and user-friendly real-time updates, enhancing its utility for users navigating through urban environments or planning trips.





4)Problem 4: Real-Time COVID-19 Statistics Tracker
Scenario:
You are developing a real-time COVID-19 statistics tracking application for a healthcare organization. The application should provide up-to-date information on COVID-19 cases, recoveries, and deaths for a specified region.
Tasks:
1. Model the data flow for fetching COVID-19 statistics from an external API and displaying it to the user.
2. Implement a Python application that integrates with a COVID-19 statistics API (e.g., disease.sh) to fetch real-time data.
3. Display the current number of cases, recoveries, and deaths for a specified region.
4. Allow users to input a region (country, state, or city) and display the corresponding COVID-19 statistics.
Deliverables:
Data flow diagram illustrating the interaction between the application and the API.
Pseudocode and implementation of the COVID-19 statistics tracking application.
Documentation of the API integration and the methods used to fetch and display COVID- 19 data.
Explanation of any assumptions made and potential improvements.

DATA FLOW DIAGRAM:-

User Input (Region) -> Python Application -> COVID-19 Statistics API (e.g., disease.sh)
                ^                                            |
                |                                            v
        Display COVID-19 Statistics <- JSON Response <- API Request

COVIS-19 STATISTICS TRACKING APPLICATION:-

import requests

class Covid19StatisticsTracker:
    def __init__(self):
        self.base_url = 'https://disease.sh/v3/covid-19'

    def fetch_covid_stats(self, region):
        endpoint = f'/countries/{region}' if region else '/all'
        url = self.base_url + endpoint

        try:
            response = requests.get(url)
            data = response.json()

            if response.status_code == 200:
                return data  # Return JSON data received from API
            else:
                print(f"Error fetching data: {data['message']}")
                return None

        except requests.exceptions.RequestException as e:
            print(f"Error fetching data: {e}")
            return None

    def display_covid_stats(self, data):
        if data:
            # Extract relevant COVID-19 statistics
            cases = data.get('cases', 'N/A')
            deaths = data.get('deaths', 'N/A')
            recovered = data.get('recovered', 'N/A')
            active = data.get('active', 'N/A')

            # Displaying COVID-19 statistics
            print(f"COVID-19 Statistics:")
            print(f"Total Cases: {cases}")
            print(f"Total Deaths: {deaths}")
            print(f"Total Recovered: {recovered}")
            print(f"Active Cases: {active}")
        else:
            print("No COVID-19 data available for the specified region.")

# Example usage:
if __name__ == "__main__":
    tracker = Covid19StatisticsTracker()
    region = input("Enter country name (leave blank for global stats): ")
    covid_data = tracker.fetch_covid_stats(region)
    tracker.display_covid_stats(covid_data)

Documentation
API Integration and Methods
API Integration:

The application integrates with the disease.sh COVID-19 API to fetch real-time statistics.
Constructs the API request dynamically based on user input (country name) to fetch statistics for a specific region or global statistics.
Fetch COVID-19 Statistics (fetch_covid_stats method):

Sends an HTTP GET request to the appropriate endpoint (/all for global stats or /countries/{country} for country-specific stats).
Handles JSON response to extract COVID-19 statistics including total cases, deaths, recoveries, and active cases.
Display COVID-19 Statistics (display_covid_stats method):

Parses JSON response to extract and display relevant COVID-19 statistics.
Handles cases where no data is available for the specified region.
Assumptions
Data Availability: Assumes real-time availability and updates from the disease.sh API.
Region Input: Users input country names primarily; can be extended to handle state or city names based on API capabilities.
API Reliability: Assumes the disease.sh API is reliable and returns accurate data.
Potential Improvements
Historical Data: Incorporate historical COVID-19 data for trend analysis and visualization.
Visualization: Develop graphical charts and maps to visualize COVID-19 statistics for easier interpretation.
Notifications: Implement notifications or alerts for significant changes in COVID-19 statistics.
Localized Data: Enhance support for retrieving and displaying regional data (e.g., state-level data within a country).
By implementing these improvements, the COVID-19 statistics tracking application can provide more comprehensive insights and support for decision-making within healthcare organizations and public health agencies.

